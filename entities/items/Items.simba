{
=====
Items
=====
}


type TItem = record
    Name      : string;      // *
    DTM       : integer;     // *
    BMP       : integer;     // *
    BMP_TOL   : integer;     // *
    Wieldable : boolean;     // *
end;


(*
InvBox
~~~~~~

.. code-block:: pascal

    Function invBox(i :Integer): TBox;

Returns TBox of surrounding Inventory SlotBox
1-2-3-4
5-6-7-8
etc.

.. note::

    by Boreas

Example:

.. code-block:: pascal

    iBox := invBox(12);
    MMouse(randomRange(iBox.x1, iBox.x2), randomRange(iBox.y1, iBox.y2), 0, 0);

*)
function invBox(I : Integer): TBox;
var
  Slot1, Slot6: TBox;
begin
  if not InRange(I, 1, 28) then
  begin
    Result := toBox(-1,-1,-1,-1);
    warn('Incorrect index: ' + IntToStr(i), WT_CORE);
    Exit;
  end;
  Slot1 := toBox(563, 213, 594, 244);
  Slot6 := toBox(605, 249, 31415, 92653);
  Result.x1 := Slot1.X1 + ((((i + 3) mod 4)) * (Slot6.X1 - Slot1.X1));
  Result.y1 := Slot1.Y1 + ((((i - 1) div 4)) * (Slot6.Y1 - Slot1.Y1));
  Result.x2 := Result.x1 + (Slot1.X2 - Slot1.X1);
  Result.y2 := Result.y1 + (Slot1.Y2 - Slot1.Y1);
end;

function pntToItem(Pnt: TPoint): Integer;
begin
  if not pointInBox(Pnt, AREA_INV) then
    exit;
  for Result := 1 to 28 do
    if pointInBox(Pnt, invBox(result)) then
      exit;
  Result := 0;
end;

(*
ItemInSlot
~~~~~~~~~~

.. code-block:: pascal

    function itemInSlot(i: Integer): Boolean;

Checks if item in inventory at specified position exists

.. note::

    by WT-Fakawi

Example:

.. code-block:: pascal

    for i := 1 to 28 do
      if itemInSlot(i) then
        Inc(Count);

*)
function gameTab(Tab: Integer): Boolean; forward;
function isDepositBoxOpen(): Boolean; forward;
function depositItemBox(Item: Integer): TBox; forward;
function itemInSlot(I: Integer): Boolean;
var
  X, Y: Integer;
  TB: TBox;
begin
  if not inRange(I, 1, 28) then
    Exit;
  gameTab(TAB_INV);

  if isDepositBoxOpen() then
    TB := depositItemBox(I)
  else
    TB := invBox(I);
  result := findColor(x, y, clOutline_black, TB.x1, TB.y1, TB.x2, TB.y2);
end;

(*
InvCount
~~~~~~~~

.. code-block:: pascal

    function getInvCount(): Integer;

Returns amount of items in your inventory

.. note::

    by RsN

Example:

.. code-block:: pascal

    totalCount := getInvCount();

*)
function getInvCount(): Integer;
var
  i: Integer;
begin
  Result := 0;
  for i := 1 to 28 do
    if (itemInSlot(I)) then
     inc(Result);
end;

function isInvFull(): Boolean;
begin
  result := (getInvCount() > 27);
end;

(*
GetItemAmount
~~~~~~~~~~~~

.. code-block:: pascal

    function getItemAmount(Pnt: TPoint): Integer;

Returns the amount of an item at point Pnt.  Works for
both bank items & inventory items.

.. note::

    Author: Flight / Zeph, N1ke & Narcle
    Last Modified: 24-12-2013

Example:

.. code-block:: pascal

    var
      i: Integer;
    begin
      i := getItemAmount(point(90,90));
      Writeln('We have '+toStr(i)+' items in bank slot #1');
    end;
*)

function getItemAmount(Pnt: TPoint): Integer;
var
  Box  : TBox;
  S    : String;
  aCol : TColEx;
  i    : Integer;
  TPA  : TPointArray;
  ATPA : T2DPointArray;
  Col  : TIntegerArray;
begin
  Result := 0;

  Box := toBox(0,0,755,500);
  if not pointInBox(Pnt, Box) then
    Exit;
  Box := toBox(Pnt.X-32,Pnt.Y-32,Pnt.X+32,Pnt.Y+32);
  aCol.create(65536, 0);
  if not aCol.findAllIn(Box, TPA) then
    Exit;

  Inc(Result);
  ATPA := clusterTPA(TPA, 5);
  if length(ATPA) < 1 then
    Exit;
  SortATPAFromMidPoint(ATPA, Pnt);

  Box  := getTPABounds(ATPA[0]);
  Col  := [65535, 65278, 16777215, 8453888]; // Yellow, white, green and ...?
  Pnt  := Point(round((Box.X1+Box.X2)/2), Box.Y1);
  Box  := toBox(Pnt.x-20, Pnt.y-15, Pnt.x+20, Pnt.y+15);
  TPA  := [];
  ATPA := [];

  for i:=0 to High(Col) do
  begin
    aCol.create(Col[i], 0);
    if aCol.findAllIn(Box, TPA) then
    begin
      S := getTextAtEx(Box.X1, Box.Y1, Box.X2, Box.Y2, 0, 1, 1, Col[i], 0, 'StatChars07');
      Result := strToIntDef(GetNumbers(S), 1);
      Case I of
        2: Result := Result * 1000;
        3: Result := Result * 1000000;
      end;
      Exit;
   end;
  end;
end;

function interactSlot(Slot: Integer; action: Variant): Boolean;
var
  x,y : Integer;
begin
  result := false;
  if (not itemInSlot(Slot)) then
    if (not (action = MOUSE_MOVE)) then
      exit;

  mouseBox(invBox(Slot), MOUSE_MOVE);
  if variantIsInteger(action) then
  begin
    if (action = MOUSE_MOVE) then
      exit(true);
    if action = MOUSE_LEFT then
    begin
      fastClick(MOUSE_LEFT);
      exit(true);
    end;
  end;

  fastClick(MOUSE_RIGHT);
  if variantIsString(action) then
    result := waitOption(action, 200)
  else
    result := true;
end;

procedure moveItemTo(Slot, targetSlot: Integer);
var
  b,b2 : TBox;
begin
  if not itemInSlot(Slot) then
    exit;
  b  := invBox(Slot);
  b2 := invBox(targetSlot);
  dragMouseBox(b, b2);
end;

(*
SlotActivated
~~~~~~~~~~~~~~

.. code-block:: pascal

    function slotActivated(Slot: Integer): Boolean;

Checks if item in specified inventory slot has a white outline.
Returns True if the item has a white outline, otherwise returns false.

.. note::

    by marpis

Example:

.. code-block:: pascal

    Result := slotActivated(4);

*)
function slotActivated(Slot: Integer): Boolean;
var
  x,y : Integer;
  TB  : TBox;
begin
  result := false;
  if not gameTab(TAB_INV) then
    exit;
  TB := invBox(Slot);
  Result := findColor(x, y, clOutline_white, TB.x1, TB.y1, TB.x2, TB.y2);
end;

function anySlotActivated(): Boolean;
var
  i : Integer;
begin
  result := false;
  for i:=1 to 28 do
    if slotActivated(i) then exit(True);
end;

function TItem.findIn(Area: TBox; var fPnt: TPoint): Boolean;
var
  x,y : Integer;
begin
  result := False;
  gameTab(TAB_INV);
  if DTMExists(self.DTM) then
    result := cs_findDTM(self.DTM, x, y, Area, cs_CTS);
  if not result then
    if bitmapExists(self.BMP) then
      result := cs_findBitmapToleranceIn(self.BMP, x, y, self.BMP_TOL, Area, cs_CTS);

  fPnt := point(x, y);
end;

function isBankOpen(): Boolean; forward;
function TItem.getAmount(ExcludeBank: Boolean): Integer;
var
  i,c : Integer;
  pnt : TPoint;
begin
  result := 0;
  gameTab(TAB_INV);
  if not ExcludeBank then
    if isBankOpen() then
      if Self.findIn(Area_BS, pnt) then
        exit(getItemAmount(pnt));

  for i := 1 to 28 do
    if itemInSlot(i) then
      if Self.findIn(invBox(i), pnt) then
      begin
        c := getItemAmount(pnt);
        if (c > 1) then
          exit(c);
        inc(Result);
      end;
end;

function TItem.getAmount(): Integer; overload;
begin
  result := Self.getAmount(False);
end;

function TItem.getSlots(): TIntegerArray;
var
  i,c : Integer;
  b   : Boolean;
  pnt : TPoint;
begin
  gameTab(TAB_INV);
  for i:=1 to 28 do
    if itemInSlot(i) then
      if Self.findIn(invBox(i), pnt) then
      begin
        setArrayLength(result, Length(result)+1);
        result[High(result)] := i;
      end;
end;
