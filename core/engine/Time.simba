// Timer type & functions by Brandon
type Timer = record
  Time, StartTime: Int64;
  IsRunning: Boolean;
end;

procedure Timer.pause;
begin
  if not self.IsRunning then
    Exit;
  self.IsRunning := False;
  Inc(self.Time, getSystemTime() - self.StartTime);
end;

procedure Timer.reset;
begin
  self.Time := 0;
  self.StartTime := self.Time;
  self.IsRunning := False;
end;

procedure Timer.start;
begin
  if self.IsRunning then
    exit();
  self.IsRunning := True;
  self.StartTime := getSystemTime();
end;

procedure Timer.restart();
begin
  self.reset;
  self.start;
end;

Function Timer.timeElapsed(): Integer;
Begin
  Result := self.Time;
  if self.IsRunning then
    Inc(Result, GetSystemTime() - self.StartTime);
End;

const
  TIME_FORMAL = 0;
  TIME_SHORT  = 1;
  TIME_ABBREV = 2;
  TIME_BARE   = 3;
  TIME_FSTOP  = 4;

  DATE_FORMAL = 1;
  DATE_MONTH  = 2;
  DATE_DAY    = 3;

(*
MsToTime
~~~~~~~~

.. code-block:: pascal

    function MsToTime(MS, StrType: Integer): string;

Takes MS in milliseconds and outputs a string with hours, mins and
seconds. Different styles can be created with different StrType values:
Str Type:

    -  Time_Formal: 2 Hours, 47 Minutes and 28 Seconds
    -  Time_Short: 02h, 47m, 28s
    -  Time_Abbrev: 2 hr, 47 min, 28 sec
    -  Time_Bare: 02:47:28
    -  Time_FStop: 12.04.40

.. note::

  by Zephyrsfury, Nava2 and Rasta Magician.

Example:

.. code-block:: pascal

*)
function msToTime(MS, TheType: Integer): string;
var
  STA: array [0..4] of TVariantArray;
  Time: array [0..2] of Integer;
  i: Integer;
begin
  Result := '';
  if (not(InRange(TheType, 0, High(STA)))) then
  begin
    Writeln('MsToTime', 'TheType: ''' + IntToStr(TheType) + ''' is not a valid value. Using Time_Bare.');
    TheType := Time_Bare;
  end;
  STA[Time_Formal] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Time_Short] := ['h ', 'm ', 's', False, 2];
  STA[Time_Abbrev] := [' hr ', ' min ', ' sec', False, 0];
  STA[Time_Bare] := [':', ':', '', True, 2];
  STA[Time_FStop] := ['.', '.', '', True, 2];
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  for i := 0 to 2 do
    if (Time[i] > 0) or (STA[TheType][3]) or (i = 2) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[TheType][4]) + STA[TheType][i];
end;

{
procedure ConvertTime64(timeMS: int64; var YEAR, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND:integer);
var
  x: int64;
begin
  x := timeMS;
  YEAR   := x div (31536000000); // 1000 * 60 * 60 * 24 * 365 (1 year or 365 days)
  x      := x mod (31536000000);
  MONTH  := x div (2592000000); // 1000 * 60 * 60 * 24 * 30 (1 month or 30 days)
  x      := x mod (2592000000);
  WEEK   := x div (604800000); // 1000 * 60 * 60 * 24 * 7 (1 week or 7 days)
  x      := x mod (604800000);
  DAY    := x div (86400000); // 1000 * 60 * 60 * 24 (1 day or 24 hours)
  x      := x mod (86400000);
  HOUR   := x div (3600000); // 1000 * 60 * 60 (1 hour or 60 minutes)
  x      := x mod (3600000);
  MINUTE := x div (60000); // 1000 * 60 (1 minute or 60 seconds)
  x      := x mod (60000);
  SECOND := x div (1000); // 1000 (1 second, is in MS format now)
  x      := x mod (1000);
end;
}

(*******************************************************************************
** An edited version of the MsToTime include function.  This redone version of
**   the method has the following changes:
**      - single arg of an int64 type
**      - removed a boolean element in the STA : TVariantArray;
**      - removed the multiple output formats (array of STA, to simly one STA
*******************************************************************************)
function msToTime64(MS: int64): string;
var
  STA: TVariantArray;
  Time: array [0..6] of Integer;
  i: Integer;
begin
  Result := '';
  STA := [' Years, ', ' Months, ', ' Weeks, ', ' Days, ', ' Hours, ',
          ' Minutes and ', ' Seconds', 0];
  ConvertTime64(MS, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5], Time[6]);
  for i := 0 to 6 do
    if (Time[i] > 0) or (STA[7]) or (i = 6) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[7]) + STA[i];
end;

(*
timeRunning
~~~~~~~~~~~

.. code-block:: pascal

    function timeRunning(): String;

Returns Time since the script was started (GetTimeRunning).

.. note::

  by Rasta Magician.

Example:

.. code-block:: pascal

*)
function timeRunning(): string;
begin
  Result := msToTime(getTimeRunning(), TIME_FORMAL);
end;

(*
TheTime
~~~~~~~~

.. code-block:: pascal

    function theTime(FullTime : boolean) : string;

Returns current time as a string
FullTime = True will return in 24 hours rather than 12 hours

.. note::

  by RsN (fixed by Ron and Markus)

Example:

.. code-block:: pascal

*)
function theTime(): string;
var
  Hour, Mins, Sec, MSec: Word;
  PAM: string;
begin
  DecodeTime(Now, Hour, Mins, Sec, MSec);
  PAM := 'AM';
  if (Hour > 12) then
  begin
    Hour := Hour - 12;
    PAM := 'PM';
  end else if (Hour = 12) then
    PAM := 'PM'
  else if (Hour = 0) then
    Hour := 12;
  Result := (Padz(IntToStr(Hour), 2) + ':' + Padz(IntToStr(Mins), 2) + ':' + Padz(IntToStr(Sec), 2) + ' ' + PAM);
end;

(*
TheDate
~~~~~~~

.. code-block:: pascal

    function theDate(DateFormat : Integer) : String;

TheDate will return the current date. DateFormats can be:

    -   Date_Formal = April 2nd, 2007  Month Day, Year
    -   Date_Month  = 04/02/07         Month/Day/Year
    -   Date_Day    = 02-04-07         Day-Month-Year

.. note::

  by Ron, Nava2 & Narcle

Example:

.. code-block:: pascal

*)
function theDate(DateFormat: Integer): string;
var
  Year, Month, Day: Word;
  D: string;
  Mnths, sfx: TStringArray;
begin
  DecodeDate(Date, Year, Month, Day);
  Mnths := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  sfx := ['st', 'nd', 'rd'];
  case DateFormat of
    1:
      begin
        if InRange(Day mod 10, 1, 3) and not InRange(Day, 11, 13) then
          D := sfx[(Day mod 10)-1]
        else
          D := 'th';
        Result := Mnths[Month - 1] + ' ' + IntToStr(Day) + D +', ' + IntToStr(Year);
      end;
    2: Result := Padz(IntToStr(Month), 2) + '/' + Padz(IntToStr(Day), 2) + '/' + Copy(IntToStr(Year), 3, 4);
    3: Result := Padz(IntToStr(Day), 2) + '-' + Padz(IntToStr(Month), 2) + '-' + Copy(IntToStr(Year), 3, 4);
  else
    writeln('DateFormat can only be 1, 2, or 3!');
  end;
end;

procedure getLocalTime(var Hour, Minute: Integer);
var
  HH,MM,SS,MSS: Word;
  S : String;
begin
  decodeTime(Now, HH, MM, SS, MSS);
  Hour   := strToInt(toStr(HH));
  Minute := strToInt(toStr(MM));
end;

procedure waitUntilTime(Hour, Minute: integer);
var
  H,M : Integer;
begin
  repeat
    getLocalTime(H,M);
    wait(5000);
  until((H=Hour) and (M=Minute));
end;
